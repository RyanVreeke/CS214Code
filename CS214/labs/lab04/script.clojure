Script started on 2020-02-27 14:20:43-0500
]0;rjv59@gold16: ~/Desktop/CS214/CS214Code/CS214/labs/lab04/clojure[01;32mrjv59@gold16[00m:[01;34m~/Desktop/CS214/CS214Code/CS214/labs/lab04/clojure[00m$ cat src/logTabl e.clj
;;;; logTable.clj displays a table of logarithms.
;;;;
;;;; Input: start, stop and increment, three numbers.
;;;; Precondition: start < stop && increment > 0.
;;;; Output: A table of logarithms from start to stop,
;;;;          with interval of increment.
;;;;
;;;; Begun by: Prof. Adams, for CS 214 at Calvin College.
;;;; Completed by: Ryan Vreeke
;;;; Date: February 27, 2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns logTable)                                 ; name the program

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; displayLogTable() recursively generates the log-table.
;;; Receive: start the first value for the table;
;;;          stop, the last  value for the table;
;;;           step, the step value for the table;
;;; Precondition: start < stop && increment > 0.
;;; Output: The table of logs from start to stop, by step.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; direct-recursive version

; replace this line with the definition of displayLogTable().
(defn displayLogTable [start stop increment]
  (if (<= start stop) 
    (do 
      (printf "The logarithm of %f is %f\n" start (Math/log10 start))
      (displayLogTable (+ start increment) stop increment))))

;; loop (indirect-recursion) version
(defn displayLogTable2 [start stop step]
  (loop [i start]                           ; set i to start
    (when (<= i stop)                       ; if i <= stop:
      (printf "The logarithm of %f is %f\n" ;  print one line
                  i (Math/log10 i)
      )
      (recur (+ i step))                    ; recurse, i += step
    )
  )
)

;; indirect/tail-recursive version (just using recur)
(defn displayLogTable3 [start stop step]
  (if (<= start stop)                     ; if start <= stop:
    (do                                      ; do these two things:
      (printf "The logarithm of %f is %f\n"  ; - print one line
                  start (Math/log10 start)
      )
      (recur (+ start step) stop step)       ; - recurse, start+=step
    )
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; -main is a 'driver' for the displayLogTable() functions.
;;; Input: start, stop and increment.
;;; Output: The table of logarithms 
;;;          from start to stop by increment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn -main []
 (println "To display a table of logarithms,")
 (print " enter the start, stop, and increment values: ") (flush)
 (let
    [ start (double (read))
      stop (double (read))
      increment (double (read))
    ] 
    (println)
    (displayLogTable start stop increment) 
    (println)
    (displayLogTable2 start stop increment) 
    (println)
    (displayLogTable3 start stop increment) 
    (println)
 )
)

]0;rjv59@gold16: ~/Desktop/CS214/CS214Code/CS214/labs/lab04/clojure[01;32mrjv59@gold16[00m:[01;34m~/Desktop/CS214/CS214Code/CS214/labs/lab04/clojure[00m$ [Kclojure -m lotT [A]0;rjv59@gold16: ~/Desktop/CS214/CS214Code/CS214/labs/lab04/clojure[01;32mrjv59@gold16[00m:[01;34m~/Desktop/CS214/CS214Code/CS214/labs/lab04/clojure[00m$ clojure -m lot[K
[K[A]0;rjv59@gold16: ~/Desktop/CS214/CS214Code/CS214/labs/lab04/clojure[01;32mrjv59@gold16[00m:[01;34m~/Desktop/CS214/CS214Code/CS214/labs/lab04/clojure[00m$ clojure -m lot  ogT able
To display a table of logarithms,
 enter the start, stop, and increment values: 1
10
0.5

The logarithm of 1.000000 is 0.000000
The logarithm of 1.500000 is 0.176091
The logarithm of 2.000000 is 0.301030
The logarithm of 2.500000 is 0.397940
The logarithm of 3.000000 is 0.477121
The logarithm of 3.500000 is 0.544068
The logarithm of 4.000000 is 0.602060
The logarithm of 4.500000 is 0.653213
The logarithm of 5.000000 is 0.698970
The logarithm of 5.500000 is 0.740363
The logarithm of 6.000000 is 0.778151
The logarithm of 6.500000 is 0.812913
The logarithm of 7.000000 is 0.845098
The logarithm of 7.500000 is 0.875061
The logarithm of 8.000000 is 0.903090
The logarithm of 8.500000 is 0.929419
The logarithm of 9.000000 is 0.954243
The logarithm of 9.500000 is 0.977724
The logarithm of 10.000000 is 1.000000

The logarithm of 1.000000 is 0.000000
The logarithm of 1.500000 is 0.176091
The logarithm of 2.000000 is 0.301030
The logarithm of 2.500000 is 0.397940
The logarithm of 3.000000 is 0.477121
The logarithm of 3.500000 is 0.544068
The logarithm of 4.000000 is 0.602060
The logarithm of 4.500000 is 0.653213
The logarithm of 5.000000 is 0.698970
The logarithm of 5.500000 is 0.740363
The logarithm of 6.000000 is 0.778151
The logarithm of 6.500000 is 0.812913
The logarithm of 7.000000 is 0.845098
The logarithm of 7.500000 is 0.875061
The logarithm of 8.000000 is 0.903090
The logarithm of 8.500000 is 0.929419
The logarithm of 9.000000 is 0.954243
The logarithm of 9.500000 is 0.977724
The logarithm of 10.000000 is 1.000000

The logarithm of 1.000000 is 0.000000
The logarithm of 1.500000 is 0.176091
The logarithm of 2.000000 is 0.301030
The logarithm of 2.500000 is 0.397940
The logarithm of 3.000000 is 0.477121
The logarithm of 3.500000 is 0.544068
The logarithm of 4.000000 is 0.602060
The logarithm of 4.500000 is 0.653213
The logarithm of 5.000000 is 0.698970
The logarithm of 5.500000 is 0.740363
The logarithm of 6.000000 is 0.778151
The logarithm of 6.500000 is 0.812913
The logarithm of 7.000000 is 0.845098
The logarithm of 7.500000 is 0.875061
The logarithm of 8.000000 is 0.903090
The logarithm of 8.500000 is 0.929419
The logarithm of 9.000000 is 0.954243
The logarithm of 9.500000 is 0.977724
The logarithm of 10.000000 is 1.000000

]0;rjv59@gold16: ~/Desktop/CS214/CS214Code/CS214/labs/lab04/clojure[01;32mrjv59@gold16[00m:[01;34m~/Desktop/CS214/CS214Code/CS214/labs/lab04/clojure[00m$ [Kclojure -m logTaable
To display a table of logarithms,
 enter the start, stop, and increment values: 0
5
0.7

The logarithm of 0.000000 is -Infinity
The logarithm of 0.700000 is -0.154902
The logarithm of 1.400000 is 0.146128
The logarithm of 2.100000 is 0.322219
The logarithm of 2.800000 is 0.447158
The logarithm of 3.500000 is 0.544068
The logarithm of 4.200000 is 0.623249
The logarithm of 4.900000 is 0.690196

The logarithm of 0.000000 is -Infinity
The logarithm of 0.700000 is -0.154902
The logarithm of 1.400000 is 0.146128
The logarithm of 2.100000 is 0.322219
The logarithm of 2.800000 is 0.447158
The logarithm of 3.500000 is 0.544068
The logarithm of 4.200000 is 0.623249
The logarithm of 4.900000 is 0.690196

The logarithm of 0.000000 is -Infinity
The logarithm of 0.700000 is -0.154902
The logarithm of 1.400000 is 0.146128
The logarithm of 2.100000 is 0.322219
The logarithm of 2.800000 is 0.447158
The logarithm of 3.500000 is 0.544068
The logarithm of 4.200000 is 0.623249
The logarithm of 4.900000 is 0.690196

]0;rjv59@gold16: ~/Desktop/CS214/CS214Code/CS214/labs/lab04/clojure[01;32mrjv59@gold16[00m:[01;34m~/Desktop/CS214/CS214Code/CS214/labs/lab04/clojure[00m$ [Kclojure -m logTaable
To display a table of logarithms,
 enter the start, stop, and increment values: 5
1
1




]0;rjv59@gold16: ~/Desktop/CS214/CS214Code/CS214/labs/lab04/clojure[01;32mrjv59@gold16[00m:[01;34m~/Desktop/CS214/CS214Code/CS214/labs/lab04/clojure[00m$ [Kexit

Script done on 2020-02-27 14:21:39-0500
